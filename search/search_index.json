{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"nf-co2footprint","text":"<p>A Nextflow plugin to estimate the CO<sub>2</sub> footprint of pipeline runs.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>The nf-co2footprint plugin estimates the energy consumption for each pipeline task based on the Nextflow resource usage metrics and information about the power consumption of the underlying compute system. The carbon intensity of the energy production is then used to estimate the respective CO<sub>2</sub> emission.</p> <p>The calculation is based on the carbon footprint computation method developed in the Green Algorithms project: www.green-algorithms.org</p> <p>Green Algorithms: Quantifying the Carbon Footprint of Computation.</p> <p>Lannelongue, L., Grealey, J., Inouye, M.,</p> <p>Adv. Sci. 2021, 2100707. https://doi.org/10.1002/advs.202100707</p> <p>The nf-co2footprint plugin generates a detailed TXT carbon footprint report containing the energy consumption, the estimated CO<sub>2</sub> emission and other relevant metrics for each task. Additionally, an HTML report is generated with information about the carbon footprint of the whole pipeline run and containing plots showing, for instance, an overview of the CO<sub>2</sub> emissions for the different processes.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Declare the plugin in your Nextflow pipeline configuration file:</p> nextflow.config<pre><code>plugins {\n  id 'nf-co2footprint@1.0.0-beta'\n}\n</code></pre> <p>This is all that is needed. Run your pipeline with the usual command.</p> <p>You can find more information on plugins in the Nextflow documentation.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Before contributing, please read the contribution guidelines carefully. You may also find the recommended testing setup helpful.</p> <p>After your changes are accepted. maintainers may then publish a new version along with your contribution.</p>"},{"location":"#credits","title":"Credits","text":"<p>The nf-co2footprint plugin is mainly developed and maintained by Sabrina Krakau and J\u00falia Mir-Pedrol at QBiC.</p> <p>We thank the following people for their extensive assistance in the development of this pipeline:</p> <ul> <li>Phil Ewels</li> <li>Paolo Di Tommaso</li> </ul>"},{"location":"co2footprint/","title":"CO2e Footprint Measures","text":"<p>A CO<sub>2</sub> equivalent (CO<sub>2</sub>e) is a metric used to compare the emissions from various greenhouse gases based on their impact on global warming.</p> <p>For this, the amounts of other gases are converted to the amount of CO<sub>2</sub> that would have the same impact on global warming (over a 100-year period).</p> <p>The formula used for the calculation of the carbon footprint (\\(CO_2e\\)) of one Nextflow task is:</p> <p>\\(CO_2e = t \\cdot (n_c \\cdot P_c \\cdot u_c + n_m \\cdot P_m) \\cdot PUE \\cdot CI\\)</p> <p>where</p> <p>\\(t\\) = the running time of the computation (h) \\(n_c\\) = the number of cores \\(n_m\\) = the size of memory available (GB) \\(u_c\\) = the core usage factor (between 0 and 1) \\(P_c\\) = the power draw of a computing core (W) \\(P_m\\) = the power draw of memory (W, per GB) \\(PUE\\) = the efficiency coefficient of the data centre \\(CI\\) = the carbon intensity of energy production, which represents the carbon footprint of producing 1 kWh of energy for a given country and energy mix</p> <p>For the final CO<sub>2</sub>e estimation of a pipeline run, the values of all cached and completed tasks are summed up. This includes failed tasks as well.</p> <p>Warning</p> <p>Note that the usage of GPUs is not yet supported.</p>"},{"location":"co2footprint/#used-data","title":"Used data","text":"<p>If the <code>location</code> parameter is specified, the plugin makes use of location-specific CI data that was copied from the Green Algorithms project green-algorithms-tool/data. The CPU TDP data from the Green Algorithms project is used to retrieve model-specific CPU power draw values.</p>"},{"location":"co2footprint/#references","title":"References","text":"<p>Green Algorithms: Quantifying the Carbon Footprint of Computation.</p> <p>Lannelongue, L., Grealey, J., Inouye, M.,</p> <p>Adv. Sci. 2021, 2100707. https://doi.org/10.1002/advs.202100707</p>"},{"location":"contributing/guidelines/","title":"Contribution guidelines","text":"<p>Hi! Thanks for contributing to the nf-co2footprint plugin for Nextflow \ud83d\ude0a</p> <p>Please read the following to help us maintain and ensure high-quality code.</p>"},{"location":"contributing/guidelines/#follow-commit-style","title":"\ud83d\udc85 Follow commit style","text":"<p>Commits should be structured like this: <code>&lt;Type&gt;: &lt;Message&gt;</code>, with the following types:</p> <ul> <li><code>Feature</code> representing an enhancement or new functionality</li> <li><code>Fix</code> when addressing a bug</li> <li><code>Documentation</code> when mainly improving comments, documentation files or docstrings</li> <li><code>Refactor</code> when moving stuff or changing naming, but essentially making no functional changes</li> <li><code>CI</code> when changing the continuous integration (guidelines, templates,...)</li> <li><code>Chore</code> when just doing something that has to be done once in a while or relates to other changes</li> </ul>"},{"location":"contributing/guidelines/#signing-commits","title":"\ud83d\udd8b\ufe0f Signing commits","text":"<p>When submitting a pull-request (PR), please sign-off the DCO to certify that you are the author of the contribution and you adhere to Nextflow's open source license by adding a <code>Signed-off-by</code> line to the contribution commit message. See here for more details.</p>"},{"location":"contributing/guidelines/#githubs-issue-tracking","title":"\ud83d\udea9 Github's issue tracking","text":"<ul> <li>When working on an issue, please assign yourself</li> <li>When opening a pull-request that connects to an issue, please mention it.</li> <li>Assign labels / types to PRs when possible</li> </ul>"},{"location":"contributing/guidelines/#create-draft-pull-requests","title":"\ud83c\udfd7\ufe0f Create draft pull-requests","text":"<ul> <li>This tells us that you are working on something, even during early stage of development. Don't worry about everything being perfect already, that's what it's for.</li> <li>If you are unable to finish the PR, someone may easily pick up the work where you left off.</li> </ul>"},{"location":"contributing/guidelines/#comment-your-code","title":"\ud83d\udcac Comment your code","text":"<ul> <li>Use docstrings for methods &amp; classes</li> <li>Use one line comments for variables</li> </ul>"},{"location":"contributing/guidelines/#unit-testing","title":"\u2611\ufe0f Unit testing","text":"<p>Run unit test frequently to notice faulty code early on. For that purpose also try to keep them brief (i.e. mock as little as possible).</p> <p>To run your unit tests, run the following command in the project root directory (ie. where the file <code>settings.gradle</code> is located): <pre><code>./gradlew check\n</code></pre></p>"},{"location":"contributing/publishing/","title":"Publishing","text":""},{"location":"contributing/publishing/#package-upload-and-publish","title":"\ud83d\udce1 Package, upload, and publish","text":"<p>The project should be hosted in a GitHub repository whose name matches the name of the plugin, that is the name of the directory in the <code>plugins</code> folder (e.g. <code>nf-hello</code>).</p> <p>Follow these steps to package, upload and publish the plugin:</p> <ol> <li>Create a file named <code>gradle.properties</code> in the project root containing the following attributes (this file should not be committed to Git):<ul> <li><code>github_organization</code>: the GitHub organisation where the plugin repository is hosted.</li> <li><code>github_username</code>: The GitHub username granting access to the plugin repository.</li> <li><code>github_access_token</code>: The GitHub access token required to upload and commit changes to the plugin repository.</li> <li><code>github_commit_email</code>: The email address associated with your GitHub account.</li> </ul> </li> <li>Use the following command to package and create a release for your plugin on GitHub:     <pre><code>./gradlew :plugins:nf-co2footprint:upload\n</code></pre></li> <li>Create a pull request against nextflow-io/plugins to make the plugin accessible to Nextflow.</li> </ol>"},{"location":"contributing/setup/","title":"Testing and debugging","text":""},{"location":"contributing/setup/#option-1-launch-with-local-nextflow-build","title":"Option 1: \ud83d\udee0\ufe0f Launch with local Nextflow build","text":"<p>To test with Nextflow for development purpose:</p> <ol> <li>Clone the Nextflow repo into a sibling directory</li> </ol> <p><pre><code>cd .. &amp;&amp; git clone https://github.com/nextflow-io/nextflow\ncd nextflow &amp;&amp; ./gradlew exportClasspath\n</code></pre> 2. Append the following line to the <code>settings.gradle</code> in this project:</p> <p><pre><code>includeBuild('../nextflow')\n</code></pre> 3. Compile the plugin code</p> <p><pre><code>./gradlew compileGroovy\n</code></pre> 4. Run nextflow with this command:</p> <pre><code>./launch.sh run -plugins nf-co2footprint &lt;script/pipeline name&gt; [pipeline params]\n</code></pre>"},{"location":"contributing/setup/#option-2-launch-via-regularly-installed-nextflow","title":"Option 2: \ud83d\ude80 Launch via regularly installed Nextflow","text":"<p>The plugin can be tested without using a local Nextflow build using the following steps:</p> <p>Warning</p> <p>This will install the compiled plugin code into your <code>$NXF_PLUGINS_DIR</code> directory (default: <code>${HOME}/.nextflow/plugins</code>).  If the plugin version from the manifest file (<code>plugins/nf-co2footprint/src/resources/META-INF/MANIFEST.MF</code>) of the dev code matches an existing plugin, any install will be overwritten.</p> <ol> <li>Compile and install the plugin code</li> </ol> <p><pre><code>./gradlew compileGroovy\nmake install\n</code></pre> 2. Run nextflow with this command, specifying the plugin version:</p> <pre><code>nextflow run -plugins nf-co2footprint@1.0.0-beta &lt;script/pipeline name&gt; [pipeline params]\n</code></pre>"},{"location":"contributing/setup/#compiling-and-running-tests","title":"\ud83e\uddea Compiling and running tests","text":"<p>To compile and run the tests use the following command:</p> <pre><code>./gradlew check\n</code></pre>"},{"location":"contributing/setup/#change-and-preview-the-docs","title":"\ud83d\udcc4 Change and preview the docs","text":"<p>The docs are generated using Material for MkDocs. To change the docs, edit the files in the docs/ folder and run the following command to generate the docs (after installing mkdocs via <code>pip install mkdocs-material</code>):</p> <pre><code>mkdocs serve\n</code></pre> <p>To preview the docs, open the URL provided by mkdocs in your browser.</p>"},{"location":"usage/configuration/","title":"Configuration of the nf-co2footprint plugin","text":""},{"location":"usage/configuration/#general-usage","title":"General usage","text":"<p>To test if the plugin works on your system please follow the quick start guide (Quick Start) on a small pipeline like nextflow-io/hello.</p> <p>You can adjust the nf-co2footprint plugin parameters in your config file as follows:</p> nextflow.config<pre><code>plugins {\n  id 'nf-co2footprint@1.0.0-beta'\n}\n\ndef co2_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')\n\nco2footprint {\n    traceFile   = \"${params.outdir}/co2footprint/co2footprint_trace_${co2_timestamp}.txt\"\n    reportFile  = \"${params.outdir}/co2footprint/co2footprint_report_${co2_timestamp}.html\"\n    summaryFile = \"${params.outdir}/co2footprint/co2footprint_summary_${co2_timestamp}.txt\"\n    ci          = 300\n    pue         = 1.4\n}\n</code></pre> <p>Include the config file for your pipeline run using the <code>-c</code> Nextflow parameter, for example as follows:</p> <pre><code>nextflow run nextflow-io/hello -c nextflow.config\n</code></pre>"},{"location":"usage/configuration/#cloud-computations","title":"Cloud computations","text":"<p>At the moment the nf-co2footprint can not natively support cloud computations.</p> <p>Warning</p> <p>This is not tested and might not work as intended, but cloud native support will be implemented soon.</p> <p>If you are still keen to get insights into your CO<sub>2</sub> you could try to find out the following and append it to your config:</p> <ul> <li>The location and hereby CI of your instance.</li> <li>The PUE of the data center, where the instance is located</li> <li>The power draw per core of your selected instance.</li> <li>If available the power draw of the memory per GB.</li> </ul> <p>Your configuration could look something like:</p> nextflow_cloud.config<pre><code>plugins {\n  id 'nf-co2footprint@1.0.0-beta'\n}\n\ndef co2_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')\n\nco2footprint {\n    traceFile           = \"${params.outdir}/co2footprint/co2footprint_trace_${co2_timestamp}.txt\"\n    reportFile          = \"${params.outdir}/co2footprint/co2footprint_report_${co2_timestamp}.html\"\n    summaryFile         = \"${params.outdir}/co2footprint/co2footprint_summary_${co2_timestamp}.txt\"\n    ci                  = 300\n    pue                 = 1.4\n    ignoreCpuModel      = true\n    powerdrawCpuDefault = 8\n    powerdrawMem        = 0.3725\n}\n</code></pre>"},{"location":"usage/configuration/#gpu-computations","title":"GPU computations","text":"<p>So far tracking of GPU driven computations are not implemented, and functionality might be impaired.</p>"},{"location":"usage/output/","title":"Output","text":""},{"location":"usage/output/#output","title":"Output","text":"<p>The nf-co2footprint plugin creates three output files:</p> <ul> <li><code>traceFile</code>: The trace file includes calculations for each task, similar to the Nextflow trace file. Within this file you can find resource usage details of specific tasks and also the hardware information of your CPU.</li> <li><code>summaryFile</code>: The summary file includes the total CO<sub>2</sub> footprint of the workflow run and the configuration used for the plugin.</li> <li><code>reportFile</code>: The HTML report contains information about the carbon footprint of the whole pipeline run as well as plots showing the distributions of the CO<sub>2</sub> emissions for the different processes. Additionally, it contains a table with the metrics for all individual tasks.</li> </ul>"},{"location":"usage/parameters/","title":"Parameters","text":""},{"location":"usage/parameters/#customising-parameters","title":"Customising parameters","text":"<p>The following parameters are currently available:</p> <ul> <li><code>traceFile</code>: Name of the TXT carbon footprint report containing the energy consumption, the estimated CO<sub>2</sub> emission and other relevant metrics for each task. Default: <code>co2footprint_trace_&lt;timestamp&gt;.txt</code>.</li> <li><code>summaryFile</code>: Name of the TXT carbon footprint summary file containing the total energy consumption and the total estimated CO<sub>2</sub> emission of the pipeline run. Default: <code>co2footprint_summary_&lt;timestamp&gt;.txt</code>.</li> <li><code>reportFile</code>: Name of the HTML report containing information about the entire carbon footprint, overview plots and more detailed task-specific metrics. Default: <code>co2footprint_report_&lt;timestamp&gt;.html</code>.</li> <li><code>ci</code>: Carbon intensity of the respective energy production. Available regions can be found here, otherwise you can use data from ElecricityMaps, to find out locally more accurate CI. Mutually exclusive with the <code>location</code> parameter. Default: 475.</li> <li><code>location</code>: location code to automatically retrieve a location-specific CI value. For countries, these are ISO alpha-2 codes.  For regions, it\u2019s the ISO alpha-2 code for the country, followed by an identifier for the state, e.g. US-CA for \u201cCalifornia, USA\u201d. You can find the available data here. Mutually exclusive with the <code>ci</code> parameter. Default: <code>null</code>.</li> <li><code>pue</code>: Power usage effectiveness, efficiency coefficient of the data centre. For local cluster you can usually find out your specific PUE at the system administrators or system managers. Also the current yearly worldwide average could be used. Default: 1.00.</li> <li><code>powerdrawMem</code>: power draw from memory. Default: 0.3725.</li> <li><code>customCpuTdpFile</code>: Input CSV file containing custom CPU TDP data. This should contain the following columns: <code>model</code>,<code>TDP</code>,<code>n_cores</code>,<code>TDP_per_core</code>. Note that this overwrites TDP values for already provided CPU models. You can find the by default used TDP data here. Default: <code>null</code>.</li> <li><code>ignoreCpuModel</code>: ignore the retrieved Nextflow trace <code>cpu_model</code> name and use the default CPU power draw value. This is useful, if the cpu model information provided by the linux kernel is not correct, for example, in the case of VMs emulating a different CPU architecture. Default: <code>false</code>.</li> <li><code>powerdrawCpuDefault</code>: the default value used as the power draw from a computing core. This is only applied if the parameter <code>ignoreCpuModel</code> is set or if the retrieved <code>cpu_model</code> could not be found in the given CPU TDP data. Default: 12.0.</li> <li><code>machineType</code>: the type of machine the computation is executed upon. Has to be in ['compute cluster', 'local', ''].   The Nextflow config option <code>process.executor</code> is used to infer the <code>machineType</code> when no value is set. The <code>machineType</code> determines the default power usage effectiveness (PUE) if not explicitly specified.   Default: 'local' / PUE of 1.0</li> </ul>"}]}